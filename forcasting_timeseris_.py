# -*- coding: utf-8 -*-
"""Forcasting Timeseris .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AzabTr0F3RhRlSphnVxxTyYPvm31XoxN

Prophet is a procedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects. It works best with time series that have strong seasonal effects and several seasons of historical data. Prophet is robust to missing data and shifts in the trend, and typically handles outliers well.

Install module fbpropet
"""

!pip install pystan fbprophet

import pandas as pd
from fbprophet import Prophet

df = pd.read_csv('Dataset.csv')

df.head()

df.describe()

print(df['Product'].unique())
print(df['Store'].unique())

"""This is **IMPORTANT** to make sure our data is single value. wether its int64 only. the data shown all for Product and Store have same value so we no need to filter any data in this two column

Data forecast only need two axis. X as Date, and Y as Value.

Based on data, colum dates are not set properly. so we need to change this colum
"""

df.dtypes

"""Data on column 'Time Date' need to pre-processing into data types. in order to understand this data pre processing you can see on below [link ](https://towardsdatascience.com/mastering-dates-and-timestamps-in-pandas-and-python-in-general-5b8c6edcc50c) """

df ['Year']= df['Time Date'].apply(lambda x: str(x)[-4:]) #Ekstrak data pada time date dengan mengambil part tahun (X-4)
df ['Month']= df['Time Date'].apply(lambda x: str(x)[-6:-4])
df ['Day']=df['Time Date'].apply(lambda x: str(x)[:-6])
df['ds']=pd.DatetimeIndex(df['Year'] +'-'+df['Month']+'-'+df['Day'])

df.head()

df.dtypes

"""In data shown DS as date time data types. here we can continue our data pre processing. 


As we known before, we only need two variables (X and Y) to get forecasting data. X will describe as **Date** where y will describe as **Valie/Price Value** 


we will eliminate the unused column with drop funciton
"""

df.head()

df.drop(['Time Date', 'Product', 'Store', 'Year', 'Month', 'Day'], axis=1, inplace=True)
df.columns = ['y', 'ds']

df.head()

"""Now we are ready to train our data into Model """

m = Prophet(interval_width=0.95, daily_seasonality=True)
model = m.fit(df)

"""FORECASTING PREDICTION"""

future = m.make_future_dataframe(periods=100, freq='D')
forecast = m.predict(future)
forecast.head()

forecast.tail()

forecast[['ds','yhat']]

plot1 = m.plot(forecast)

plot2 = m.plot_components(forecast)